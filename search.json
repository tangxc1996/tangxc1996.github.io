[{"categories":null,"content":"go docker和nginx VSCode操作Docker  需要在VSCode中安装相关的插件，包括Docker、Remote-Containers和Remote-SSH； 在dockerhub上选择需要的镜像pull到本地，右击需要运行的的image选择“start”； 等待image右侧的图标变成绿色的运行标志后，右击已经运行的containers，点击“attach visual studio code\"即可跳出docker下的vscode窗口;  新建完成docker下的vscode窗口后，也可以在菜单栏的“文件”-\u003e“打开”重新选择需要的文件夹。（remote-containers和remote-ssh共用一套操作窗口）\ndocker常见命令   docker由镜像创建容器golang/ubuntu：docker run -it \u003cimage:version\u003e\n 可以在命令中加入–rm命令在退出后删除容器 可以在命令中加入-p命令来映射端口    docker运行创建的镜像：\n docker ps -a 查看所有存在的镜像，获得目标容器id docker start \u003ccontainer-id\u003e  打开目标容器 docker attach \u003ccontainer-id\u003e 连接进入容器    docker提交容器为镜像：\n1  docker commit -a \u003cauthor-id\u003e -m \u003ccomment\u003e \u003ccontainer-id\u003e \u003cimage:version\u003e     docker其它命令：\n docker images 显示所有镜像 docker rm \u003ccontainer-id\u003e 删除对应id容器 docker rmi \u003cimage-id\u003e 删除image-id镜像（删除前保证不存在对应容器） docker kill \u003ccontainer-id\u003e 在容器命令行外结束容器 docker diff \u003ccontainer-id\u003e 可以用于查看容器相对于容器的修改，输出结果中A表示新建，C表示修改，D表示删除。 docker history \u003cimage-id\u003e 查看镜像历史 docker build -t \u003cimage-id:version\u003e \u003cpath\u003e 使用指定路径下的dockerfile文件构建镜像，指定目录下的文件会一起打包交给docker构建引擎 docker stats 查看容器消耗系统资源 docker volume ls 查看所有存在的volume docker volume prune 清除所有不使用的volume    Dockerfile定制镜像 参考资料：docker从入门到实践\ndocker commit命令一般不用于镜像定制，通常会使用dockerfile文件制作需要的镜像。由于容器内部的每次操作都会被记录下来，因而会有大量的无关文件被添加到镜像中。\n 因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。\n– https://yeasy.gitbook.io/docker_practice/basic_concept/image\n Dockerfile 是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建：参考dockerfile常用命令\n  FROM命令用于指定基础镜像\n  RUN命令用于运行shell，一次RUN命令对应一层\n  COPY命令从上下文复制文件或者目录到容器指定路径(复制文件夹时建议使用如COPY . /形式，见Docker COPY 复制文件夹的诡异行为)\n  CMD用于在docker build阶段运行程序，仅文件中最后一条命令生效\n  docker-compose\n1 2 3 4 5 6  version:\"3\"services:golang:build:.ubuntu:image:\"ubuntu:latest\"    docker运行的开销\n模拟负载均衡   参考资料：docker使用nginx模拟负载均衡\n 在本机上安装docker和nginx brew install nginx 在docker中下载nginx镜像并运行docker run --rm -it nginx -p 81/82:80新建nginx容器 进入nginx容器中，分别使用“web01”和“web02”代替掉/usr/share/nginx/html/index.html的内容 在/usr/local/etc/nginx/nginx.conf下修改server部分内容如下：  1 2 3 4 5 6 7 8 9  upstream myservers { server 127.0.0.1:81; server 127.0.0.1:82; } server { location / { proxy_pass http://myservers; } }\t  在浏览器下访问nginx页面或者使用curl命令请求nginx即可发现请求被分给docker容器内的nginx    正向代理和反向代理\n  docker查看容器ip\n  curl命令构造http请求\n  nginx监听端口、html文件位置等配置文件在/usr/local/etc/nginx/nginx.conf\n  mac下安装nginx mac下nginx常用命令：\n nginx 启动nginx nginx -s reload 重新启动 nginx -s stop 停止nginx运行    ","description":"","tags":null,"title":"go语言备忘录","uri":"/it/hello-world/"},{"categories":null,"content":"由于线上环境与本地环境差别很大，因此通常我们开发的时候会首先在IDE上编写并调试代码，接着通过git将代码上传至远程仓库，最后在开发机下拉取提交的代码以尝试在一个更为接近线上环境的条件下测试代码。这里的操作相对烦琐，以往也有一些关于使用GoLand在本地与远程环境间同步代码的文档如golang自动同步代码，但在尝试过程中仍然容易遇到各种各样的问题如.git文件夹和新建及删除文件无法同步等。为了更好地提高开发效率，本文在这里会简单介绍一种新的在线编辑代码的方式。\nVSCode下载与使用 VSCode是一个微软推出的轻量级代码编辑器，它完全免费且开源，并支持几乎所有主流编程语言的开发。VSCode也支持Win、Mac以及Linux平台，打开VSCode官网，即可找到对应平台的VSCode下载链接。下载并安装完成后打开VSCode，可以看到它的界面如下图所示：\n界面右侧会有一些VSCode入门知识和使用简介，最左侧的是插件栏和设置入口。首先需要安装Go语言开发对应的插件。如下图所示：\n确保本地已安装Go的情况下，即可使用control+~快捷键方式调出终端。在VSCode中编写并完成代码后使用go run .命令来查看运行结果。在保持VSCode文档焦点在需要运行的源代码文件上时，也可以直接点击运行按钮来执行或者调试程序。\nVSCode远程连接与运行 为了在VSCode上查看并运行远程文件，首先需要安装Remote - SSH插件。\n安装完成后插件栏上会出现用于操作远程登录的插件图标，点开图标后找到SSH TARGET右侧的加号，输入ssh登录命令并输入密码，选择想要查看的项目文件夹，即可远程操作项目。\n由于VSCode操作文件夹时都需要密码，这里建议提前配置好开发机ssh登录密钥。首先在本机使用ssh-keygen命令生成密钥对，运行完成后当前用户目录下会生成一个.ssh文件夹，其中包含私钥文件id_rsa和公钥文件id_rsa.pub。接着将公钥复制到开发机的~/ .ssh/authorized_key文件中并修改权限。之后重新登录开发机，如果不需要输入密码即为登录成功。\n配置好上述步骤后即可编写并调试项目。由于VSCode直接操作开发机上的项目文件，当网络较差时会出现明显的延迟现象，因此建议在网络条件较好的情况下使用。在按照VSCode提示安装其它插件后也可以直接在开发机上进行程序调试操作。\n","description":"","tags":null,"title":"Visual Studio Code远程调试","uri":"/it/java/"}]
