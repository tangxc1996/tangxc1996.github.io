<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">悠悠彼行路</title>
    <subtitle type="html"></subtitle>
    <updated>2021-09-08T23:32:25&#43;08:00</updated>
    <id>https://blog.tangxc.space/</id>
    <link rel="alternate" type="text/html" href="https://blog.tangxc.space/" />
    <link rel="self" type="application/atom&#43;xml" href="https://blog.tangxc.space/atom.xml" />
    <author>
            <name>Shechem</name>
            <uri>https://blog.tangxc.space/</uri>
            
                <email>tangxc.nj@qq.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights>
    <generator uri="https://gohugo.io/" version="0.87.0">Hugo</generator>
        <entry>
            <title type="text">go语言备忘录</title>
            <link rel="alternate" type="text/html" href="https://blog.tangxc.space/it/hello-world/" />
            <id>https://blog.tangxc.space/it/hello-world/</id>
            <updated>2021-09-08T22:54:28&#43;08:00</updated>
            <published>2021-08-24T21:31:49&#43;08:00</published>
            <author>
                    <name>Shechem</name>
                    <uri>https://blog.tangxc.space/</uri>
                    <email>tangxc.nj@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">go docker和nginx VSCode操作Docker  需要在VSCode中安装相关的插件，包括Docker、Remote-Containers和Remote-SSH； 在dockerhub上选择需要的镜像pull到本地，右击需要运行的的image选择“start”； 等待image右侧的图标变成绿色的运行标志后，右击已经运行的containers，点击“attach visual studio code&amp;quot;即可跳出docker下的vscode窗口;  新建完成docker下的vscode窗口后，也可以在菜单栏的“文件”-&amp;gt;“打开”重新选择需要的文件夹。（remote-containers和remote-ssh共用一套操作窗口）</summary>
            
                <content type="html">&lt;h2 id=&#34;go&#34;&gt;go&lt;/h2&gt;
&lt;h2 id=&#34;docker和nginx&#34;&gt;docker和nginx&lt;/h2&gt;
&lt;h3 id=&#34;vscode操作docker&#34;&gt;VSCode操作Docker&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;需要在VSCode中安装相关的插件，包括&lt;strong&gt;Docker&lt;/strong&gt;、&lt;strong&gt;Remote-Containers&lt;/strong&gt;和&lt;strong&gt;Remote-SSH&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;在dockerhub上选择需要的镜像pull到本地，右击需要运行的的image选择“start”；&lt;/li&gt;
&lt;li&gt;等待image右侧的图标变成绿色的运行标志后，右击已经运行的containers，点击“attach visual studio code&amp;quot;即可跳出docker下的vscode窗口;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;新建完成docker下的vscode窗口后，也可以在菜单栏的“文件”-&amp;gt;“打开”重新选择需要的文件夹。&lt;strong&gt;（remote-containers和remote-ssh共用一套操作窗口）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.tangxc.space/gonote/image-20210721174742709.png&#34; alt=&#34;image-20210825143543536&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker常见命令&#34;&gt;docker常见命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker由镜像创建容器golang/ubuntu：&lt;code&gt;docker run -it &amp;lt;image:version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在命令中加入&amp;ndash;rm命令在退出后删除容器&lt;/li&gt;
&lt;li&gt;可以在命令中加入-p命令来映射端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker运行创建的镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker ps -a&lt;/code&gt;  查看所有存在的镜像，获得目标容器id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker start &amp;lt;container-id&amp;gt; &lt;/code&gt;  打开目标容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker attach &amp;lt;container-id&amp;gt;&lt;/code&gt;  连接进入容器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker提交容器为镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker commit -a &amp;lt;author-id&amp;gt; -m &amp;lt;comment&amp;gt; &amp;lt;container-id&amp;gt; &amp;lt;image:version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker其它命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt; 显示所有镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker rm &amp;lt;container-id&amp;gt;&lt;/code&gt; 删除对应id容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker rmi &amp;lt;image-id&amp;gt;&lt;/code&gt;  删除image-id镜像（删除前保证不存在对应容器）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker kill &amp;lt;container-id&amp;gt;&lt;/code&gt; 在容器命令行外结束容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker diff &amp;lt;container-id&amp;gt;&lt;/code&gt; 可以用于查看容器相对于容器的修改，输出结果中A表示新建，C表示修改，D表示删除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker history &amp;lt;image-id&amp;gt;&lt;/code&gt;  查看镜像历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker build -t &amp;lt;image-id:version&amp;gt; &amp;lt;path&amp;gt;&lt;/code&gt; 使用指定路径下的dockerfile文件构建镜像，指定目录下的文件会一起打包交给docker构建引擎&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker stats &lt;/code&gt;查看容器消耗系统资源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume ls &lt;/code&gt;查看所有存在的volume&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume prune &lt;/code&gt;清除所有不使用的volume&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dockerfile定制镜像&#34;&gt;Dockerfile定制镜像&lt;/h3&gt;
&lt;p&gt;参考资料：&lt;a href=&#34;https://yeasy.gitbook.io/docker_practice/image/commit&#34;&gt;docker从入门到实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker commit&lt;/code&gt;命令一般不用于镜像定制，通常会使用dockerfile文件制作需要的镜像。由于容器内部的每次操作都会被记录下来，因而会有大量的无关文件被添加到镜像中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为镜像包含操作系统完整的 &lt;code&gt;root&lt;/code&gt; 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Union_mount&#34;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 &lt;code&gt;ISO&lt;/code&gt; 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。&lt;/p&gt;
&lt;p&gt;镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。&lt;/p&gt;
&lt;p&gt;分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://yeasy.gitbook.io/docker_practice/basic_concept/image&#34;&gt;https://yeasy.gitbook.io/docker_practice/basic_concept/image&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建：参考&lt;a href=&#34;https://www.runoob.com/docker/docker-dockerfile.html&#34;&gt;dockerfile常用命令&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FROM命令用于指定基础镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RUN命令用于运行shell，一次RUN命令对应一层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COPY命令从上下文复制文件或者目录到容器指定路径(复制文件夹时建议使用如&lt;code&gt;COPY . /&lt;/code&gt;形式，见&lt;a href=&#34;https://zhuanlan.zhihu.com/p/88815534&#34;&gt;Docker COPY 复制文件夹的诡异行为&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD用于在docker build阶段运行程序，仅文件中最后一条命令生效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/docker/docker-compose.html&#34;&gt;docker-compose&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;golang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ubuntu:latest&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/21889053/what-is-the-runtime-performance-cost-of-a-docker-container&#34;&gt;docker运行的开销&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;模拟负载均衡&#34;&gt;模拟负载均衡&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参考资料：&lt;a href=&#34;https://cloud.tencent.com/developer/article/1594838&#34;&gt;docker使用nginx模拟负载均衡&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在本机上安装docker和nginx &lt;code&gt;brew install nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在docker中下载nginx镜像并运行&lt;code&gt;docker run --rm -it nginx -p 81/82:80&lt;/code&gt;新建nginx容器&lt;/li&gt;
&lt;li&gt;进入nginx容器中，分别使用“web01”和“web02”代替掉&lt;code&gt;/usr/share/nginx/html/index.html&lt;/code&gt;的内容&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt;下修改server部分内容如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;upstream&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;myservers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;127.0.0.1:81;&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;127.0.0.1:82;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;err&#34;&gt;proxy_pass&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;http://myservers;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt;		
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;在浏览器下访问nginx页面或者使用&lt;code&gt;curl&lt;/code&gt;命令请求nginx即可发现请求被分给docker容器内的nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.huaweicloud.com/articles/9d6690a636ff77544d4f5cb2381ee6f2.html&#34;&gt;正向代理和反向代理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/f34eb0834057&#34;&gt;docker查看容器ip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/07c4dddae43a&#34;&gt;curl命令构造http请求&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nginx监听端口、html文件位置等配置文件在&lt;code&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000016020328&#34;&gt;mac下安装nginx&lt;/a&gt;     mac下nginx常用命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt; 启动nginx&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx -s reload&lt;/code&gt; 重新启动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx -s stop&lt;/code&gt; 停止nginx运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Visual Studio Code远程调试</title>
            <link rel="alternate" type="text/html" href="https://blog.tangxc.space/it/java/" />
            <id>https://blog.tangxc.space/it/java/</id>
            <updated>2021-09-08T22:54:28&#43;08:00</updated>
            <published>2021-08-24T21:31:49&#43;08:00</published>
            <author>
                    <name>Shechem</name>
                    <uri>https://blog.tangxc.space/</uri>
                    <email>tangxc.nj@qq.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">由于线上环境与本地环境差别很大，因此通常我们开发的时候会首先在IDE上编写并调试代码，接着通过git将代码上传至远程仓库，最后在开发机下拉取提交的代码以尝试在一个更为接近线上环境的条件下测试代码。这里的操作相对烦琐，以往也有一些关于使用GoLand在本地与远程环境间同步代码的文档如golang自动同步代码，但在尝试过程中仍然容易遇到各种各样的问题如.git文件夹和新建及删除文件无法同步等。为了更好地提高开发效率，本文在这里会简单介绍一种新的在线编辑代码的方式。</summary>
            
                <content type="html">&lt;p&gt;由于线上环境与本地环境差别很大，因此通常我们开发的时候会首先在IDE上编写并调试代码，接着通过git将代码上传至远程仓库，最后在开发机下拉取提交的代码以尝试在一个更为接近线上环境的条件下测试代码。这里的操作相对烦琐，以往也有一些关于使用GoLand在本地与远程环境间同步代码的文档如&lt;a href=&#34;https://bytedance.feishu.cn/docs/GFrg6TGs3PBTxUx4awhiBa&#34;&gt;golang自动同步代码&lt;/a&gt;，但在尝试过程中仍然容易遇到各种各样的问题如.git文件夹和新建及删除文件无法同步等。为了更好地提高开发效率，本文在这里会简单介绍一种新的在线编辑代码的方式。&lt;/p&gt;
&lt;h2 id=&#34;vscode下载与使用&#34;&gt;VSCode下载与使用&lt;/h2&gt;
&lt;p&gt;VSCode是一个微软推出的轻量级代码编辑器，它完全免费且开源，并支持几乎所有主流编程语言的开发。VSCode也支持Win、Mac以及Linux平台，打开&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode官网&lt;/a&gt;，即可找到对应平台的VSCode下载链接。下载并安装完成后打开VSCode，可以看到它的界面如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.tangxc.space/Visual_Studio_Code%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/image-20210815114558310.png&#34; alt=&#34;image-20210815114558310&#34;&gt;&lt;/p&gt;
&lt;p&gt;界面右侧会有一些VSCode入门知识和使用简介，最左侧的是插件栏和设置入口。首先需要安装Go语言开发对应的插件。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.tangxc.space/gonote/image-20210721174742709.png&#34; alt=&#34;image-20210825143543536&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;确保本地已安装Go的情况下，即可使用control+~快捷键方式调出终端。在VSCode中编写并完成代码后使用go run .命令来查看运行结果。在保持VSCode文档焦点在需要运行的源代码文件上时，也可以直接点击运行按钮来执行或者调试程序。&lt;/p&gt;
&lt;h2 id=&#34;vscode远程连接与运行&#34;&gt;VSCode远程连接与运行&lt;/h2&gt;
&lt;p&gt;为了在VSCode上查看并运行远程文件，首先需要安装Remote - SSH插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.tangxc.space/Visual_Studio_Code%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/image-20210815121125027.png&#34; alt=&#34;image-20210815121125027&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装完成后插件栏上会出现用于操作远程登录的插件图标，点开图标后找到SSH TARGET右侧的加号，输入ssh登录命令并输入密码，选择想要查看的项目文件夹，即可远程操作项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.tangxc.space/Visual_Studio_Code%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/image-20210815130137566.png&#34; alt=&#34;image-20210815130137566&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于VSCode操作文件夹时都需要密码，这里建议提前配置好开发机ssh登录密钥。首先在本机使用ssh-keygen命令生成密钥对，运行完成后当前用户目录下会生成一个.ssh文件夹，其中包含私钥文件id_rsa和公钥文件id_rsa.pub。接着将公钥复制到开发机的&lt;code&gt;~/ .ssh/authorized_key&lt;/code&gt;文件中并修改权限。之后重新登录开发机，如果不需要输入密码即为登录成功。&lt;/p&gt;
&lt;p&gt;配置好上述步骤后即可编写并调试项目。由于VSCode直接操作开发机上的项目文件，当网络较差时会出现明显的延迟现象，因此建议在网络条件较好的情况下使用。在按照VSCode提示安装其它插件后也可以直接在开发机上进行程序调试操作。&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
